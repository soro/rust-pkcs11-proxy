#![allow(non_camel_case_types)]

use std::ffi;

#[cfg(windows)]
pub type ck_ulong_t = u32;
#[cfg(all(target_os = "linux", target_arch = "arm"))]
pub type ck_ulong_t = u32;
#[cfg(all(not(windows), not(all(target_os = "linux", target_arch = "arm"))))]
pub type ck_ulong_t = u64;

#[cfg(windows)]
pub type ck_long_t = i32;
#[cfg(all(target_os = "linux", target_arch = "arm"))]
pub type ck_long_t = i32;
#[cfg(all(not(windows), not(all(target_os = "linux", target_arch = "arm"))))]
pub type ck_long_t = i64;

// full byte for a bool
pub type ck_bool_t = u8;
pub type ck_flags_t = ck_ulong_t;

pub const OK: u32 = 0;

// these values should be cast to ck_ulong_t before returning to C caller
#[repr(u32)]
pub enum PkcsError {
    CANCEL = 1,
    HOST_MEMORY = 2,
    SLOT_ID_INVALID = 3,
    GENERAL_ERROR = 5,
    FUNCTION_FAILED = 6,
    ARGUMENTS_BAD = 7,
    NO_EVENT = 8,
    NEED_TO_CREATE_THREADS = 9,
    CANT_LOCK = 0xa,
    ATTRIBUTE_READ_ONLY = 0x10,
    ATTRIBUTE_SENSITIVE = 0x11,
    ATTRIBUTE_TYPE_INVALID = 0x12,
    ATTRIBUTE_VALUE_INVALID = 0x13,
    DATA_INVALID = 0x20,
    DATA_LEN_RANGE = 0x21,
    DEVICE_ERROR = 0x30,
    DEVICE_MEMORY = 0x31,
    DEVICE_REMOVED = 0x32,
    ENCRYPTED_DATA_INVALID = 0x40,
    ENCRYPTED_DATA_LEN_RANGE = 0x41,
    FUNCTION_CANCELED = 0x50,
    FUNCTION_NOT_PARALLEL = 0x51,
    FUNCTION_NOT_SUPPORTED = 0x54,
    KEY_HANDLE_INVALID = 0x60,
    KEY_SIZE_RANGE = 0x62,
    KEY_TYPE_INCONSISTENT = 0x63,
    KEY_NOT_NEEDED = 0x64,
    KEY_CHANGED = 0x65,
    KEY_NEEDED = 0x66,
    KEY_INDIGESTIBLE = 0x67,
    KEY_FUNCTION_NOT_PERMITTED = 0x68,
    KEY_NOT_WRAPPABLE = 0x69,
    KEY_UNEXTRACTABLE = 0x6a,
    MECHANISM_INVALID = 0x70,
    MECHANISM_PARAM_INVALID = 0x71,
    OBJECT_HANDLE_INVALID = 0x82,
    OPERATION_ACTIVE = 0x90,
    OPERATION_NOT_INITIALIZED = 0x91,
    PIN_INCORRECT = 0xa0,
    PIN_INVALID = 0xa1,
    PIN_LEN_RANGE = 0xa2,
    PIN_EXPIRED = 0xa3,
    PIN_LOCKED = 0xa4,
    SESSION_CLOSED = 0xb0,
    SESSION_COUNT = 0xb1,
    SESSION_HANDLE_INVALID = 0xb3,
    SESSION_PARALLEL_NOT_SUPPORTED = 0xb4,
    SESSION_READ_ONLY = 0xb5,
    SESSION_EXISTS = 0xb6,
    SESSION_READ_ONLY_EXISTS = 0xb7,
    SESSION_READ_WRITE_SO_EXISTS = 0xb8,
    SIGNATURE_INVALID = 0xc0,
    SIGNATURE_LEN_RANGE = 0xc1,
    TEMPLATE_INCOMPLETE = 0xd0,
    TEMPLATE_INCONSISTENT = 0xd1,
    TOKEN_NOT_PRESENT = 0xe0,
    TOKEN_NOT_RECOGNIZED = 0xe1,
    TOKEN_WRITE_PROTECTED = 0xe2,
    UNWRAPPING_KEY_HANDLE_INVALID = 0xf0,
    UNWRAPPING_KEY_SIZE_RANGE = 0xf1,
    UNWRAPPING_KEY_TYPE_INCONSISTENT = 0xf2,
    USER_ALREADY_LOGGED_IN = 0x100,
    USER_NOT_LOGGED_IN = 0x101,
    USER_PIN_NOT_INITIALIZED = 0x102,
    USER_TYPE_INVALID = 0x103,
    USER_ANOTHER_ALREADY_LOGGED_IN = 0x104,
    USER_TOO_MANY_TYPES = 0x105,
    WRAPPED_KEY_INVALID = 0x110,
    WRAPPED_KEY_LEN_RANGE = 0x112,
    WRAPPING_KEY_HANDLE_INVALID = 0x113,
    WRAPPING_KEY_SIZE_RANGE = 0x114,
    WRAPPING_KEY_TYPE_INCONSISTENT = 0x115,
    RANDOM_SEED_NOT_SUPPORTED = 0x120,
    RANDOM_NO_RNG = 0x121,
    DOMAIN_PARAMS_INVALID = 0x130,
    BUFFER_TOO_SMALL = 0x150,
    SAVED_STATE_INVALID = 0x160,
    INFORMATION_SENSITIVE = 0x170,
    STATE_UNSAVEABLE = 0x180,
    CRYPTOKI_NOT_INITIALIZED = 0x190,
    CRYPTOKI_ALREADY_INITIALIZED = 0x191,
    MUTEX_BAD = 0x1a0,
    MUTEX_NOT_LOCKED = 0x1a1,
    FUNCTION_REJECTED = 0x200,
    VENDOR_DEFINED =  1 << 31,
}

pub const CKF_ARRAY_ATTRIBUTE: u32 = 1 << 30;

#[repr(u32)]
pub enum AttributeType {
    CLASS = 0,
    TOKEN = 1,
    PRIVATE = 2,
    LABEL = 3,
    APPLICATION = 0x10,
    VALUE = 0x11,
    OBJECT_ID = 0x12,
    CERTIFICATE_TYPE = 0x80,
    ISSUER = 0x81,
    SERIAL_NUMBER = 0x82,
    AC_ISSUER = 0x83,
    OWNER = 0x84,
    ATTR_TYPES = 0x85,
    TRUSTED = 0x86,
    CERTIFICATE_CATEGORY = 0x87,
    JAVA_MIDP_SECURITY_DOMAIN = 0x88,
    URL = 0x89,
    HASH_OF_SUBJECT_PUBLIC_KEY = 0x8a,
    HASH_OF_ISSUER_PUBLIC_KEY = 0x8b,
    CHECK_VALUE = 0x90,
    KEY_TYPE = 0x100,
    SUBJECT = 0x101,
    ID = 0x102,
    SENSITIVE = 0x103,
    ENCRYPT = 0x104,
    DECRYPT = 0x105,
    WRAP = 0x106,
    UNWRAP = 0x107,
    SIGN = 0x108,
    SIGN_RECOVER = 0x109,
    VERIFY = 0x10a,
    VERIFY_RECOVER = 0x10b,
    DERIVE = 0x10c,
    START_DATE = 0x110,
    END_DATE = 0x111,
    MODUS = 0x120,
    MODUS_BITS = 0x121,
    PUBLIC_EXPONENT = 0x122,
    PRIVATE_EXPONENT = 0x123,
    PRIME_1 = 0x124,
    PRIME_2 = 0x125,
    EXPONENT_1 = 0x126,
    EXPONENT_2 = 0x127,
    COEFFICIENT = 0x128,
    PRIME = 0x130,
    SUBPRIME = 0x131,
    BASE = 0x132,
    PRIME_BITS = 0x133,
    SUB_PRIME_BITS = 0x134,
    VALUE_BITS = 0x160,
    VALUE_LEN = 0x161,
    EXTRACTABLE = 0x162,
    LOCAL = 0x163,
    NEVER_EXTRACTABLE = 0x164,
    ALWAYS_SENSITIVE = 0x165,
    KEY_GEN_MECHANISM = 0x166,
    MODIFIABLE = 0x170,
    EC_OR_ECDSA_PARAMS = 0x180,
    EC_POINT = 0x181,
    SECONDARY_AUTH = 0x200,
    AUTH_PIN_FLAGS = 0x201,
    ALWAYS_AUTHENTICATE = 0x202,
    WRAP_WITH_TRUSTED = 0x210,
    HW_FEATURE_TYPE = 0x300,
    RESET_ON_INIT = 0x301,
    HAS_RESET = 0x302,
    PIXEL_X = 0x400,
    PIXEL_Y = 0x401,
    RESOLUTION = 0x402,
    CHAR_ROWS = 0x403,
    CHAR_COLUMNS = 0x404,
    COLOR = 0x405,
    BITS_PER_PIXEL = 0x406,
    CHAR_SETS = 0x480,
    ENCODING_METHODS = 0x481,
    MIME_TYPES = 0x482,
    MECHANISM_TYPE = 0x500,
    REQUIRED_CMS_ATTRIBUTES = 0x501,
    DEFAT_CMS_ATTRIBUTES = 0x502,
    SUPPORTED_CMS_ATTRIBUTES = 0x503,
    WRAP_TEMPLATE = CKF_ARRAY_ATTRIBUTE | 0x211,
    UNWRAP_TEMPLATE = CKF_ARRAY_ATTRIBUTE | 0x212,
    ALLOWED_MECHANISMS = CKF_ARRAY_ATTRIBUTE | 0x600,
    VENDOR_DEFINED = 1 << 31,
}

pub struct CkCInitializeArgs {
    create_mutex: ffi::c_void,
    destroy_mutex: ffi::c_void,
    lock_mutex: ffi::c_void,
    unlock_mutex: ffi::c_void,
    flags: ck_flags_t,
    reserved: ffi::c_void,
}
